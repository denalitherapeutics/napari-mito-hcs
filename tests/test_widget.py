""" Tests for the napari GUI controls """

# Imports
import unittest

# Our own imports
from napari_mito_hcs import widget, pipeline

# Tests


class TestMitoHCSWidget(unittest.TestCase):

    def test_can_instantiate_with_default_config(self):

        res_widget = widget.MitoHCSWidget(None)
        res_pipeline = res_widget.get_pipeline()

        exp_pipeline = pipeline.MitoHCSPipeline.load_default('mito-hcs')

        # The configs generated by both pipelines should be identical
        assert res_pipeline.save_config() == exp_pipeline.save_config()

    def test_can_update_widget_config_from_gui(self):

        res_widget = widget.MitoHCSWidget(None)

        # Change some defaults that are controlled in the GUI
        exp_pipeline = pipeline.MitoHCSPipeline.load_default('mito-hcs')
        exp_pipeline.seg_nuclei_params['threshold'] = 12345
        exp_pipeline.seg_cell_params['threshold'] = 23456
        exp_pipeline.seg_mitochondria_params['threshold'] = 34567

        # Before updating the GUI, the pipelines shouldn't match
        res_pipeline = res_widget.get_pipeline()
        assert res_pipeline.save_config() != exp_pipeline.save_config()

        # Update the GUI with our new parameters
        res_widget.update_params(exp_pipeline)
        res_pipeline = res_widget.get_pipeline()

        # Now the GUI's pipeline matches our pipeline
        assert res_pipeline.save_config() == exp_pipeline.save_config()

    def test_update_config_doesnt_change_non_gui_defaults(self):

        res_widget = widget.MitoHCSWidget(None)

        # Change some defaults that are **not** controlled in the GUI
        exp_pipeline = pipeline.MitoHCSPipeline.load_default('mito-hcs')
        exp_pipeline.find_file_params['cell_pattern'] = 'test cell'
        exp_pipeline.find_file_params['nuclei_pattern'] = 'test nuclei'
        exp_pipeline.find_file_params['mitochondria_pattern'] = 'test mitochondria'

        # Before updating the GUI, the pipelines shouldn't match
        res_pipeline = res_widget.get_pipeline()
        assert res_pipeline.save_config() != exp_pipeline.save_config()

        # Update the GUI with our new parameters which are **not** part of the GUI
        res_widget.update_params(exp_pipeline)
        res_pipeline = res_widget.get_pipeline()

        # The GUI's pipeline object isn't changed by our updates
        assert res_pipeline.save_config() != exp_pipeline.save_config()
        exp_find_file_params = pipeline.MitoHCSPipeline.load_default('mito-hcs').find_file_params
        assert res_pipeline.find_file_params == exp_find_file_params


class TestDemoDataWidgets(unittest.TestCase):

    def test_load_wt_example_images(self):

        res_images = widget.load_wt_example_images()

        exp_image_names = [
            {'name': 'Cell Image'},
            {'name': 'Mito Image'},
            {'name': 'Nucl Image'},
        ]

        assert len(res_images) == len(exp_image_names)
        for res_image, exp_name in zip(res_images, exp_image_names):
            assert res_image[1] == exp_name

    def test_load_ko_example_images(self):

        res_images = widget.load_ko_example_images()

        exp_image_names = [
            {'name': 'Cell Image'},
            {'name': 'Mito Image'},
            {'name': 'Nucl Image'},
        ]

        assert len(res_images) == len(exp_image_names)
        for res_image, exp_name in zip(res_images, exp_image_names):
            assert res_image[1] == exp_name
